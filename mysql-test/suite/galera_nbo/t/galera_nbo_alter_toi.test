#
# Test that NBO TOI can coexist with a concurrent, non-conflicting TOI DDL
#

# This is the codership code modified to always execute the NBO action first

--source include/galera_cluster.inc
--source include/have_debug_sync.inc
--source include/have_debug.inc

CREATE TABLE t1 (f1 INTEGER NOT NULL) ENGINE=InnoDB;
CREATE TABLE t2 (f1 INTEGER) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1);

--connection node_2
SET GLOBAL debug = 'd,sync.alter_locked_tables_inplace';

--connection node_1
SET SESSION wsrep_osu_method=NBO;
--send ALTER TABLE t1 ALGORITHM=INPLACE, LOCK=SHARED, ADD PRIMARY KEY (f1);


--connection node_2
SET SESSION wsrep_sync_wait=0;

# Wait for the ALTER to block in sync point
--let $wait_condition = SELECT COUNT(*) = 1 FROM INFORMATION_SCHEMA.PROCESSLIST WHERE STATE = 'debug sync point: now';
--source include/wait_condition.inc

--connect node_1a, 127.0.0.1, root, , test, $NODE_MYPORT_1
--connection node_1a
ALTER TABLE t2 LOCK=SHARED, ADD COLUMN f2 INTEGER;

--connection node_2
SET SESSION wsrep_sync_wait=0;

# Wait for the ALTERs to block in sync point
--let $wait_condition = SELECT COUNT(*) = 2 FROM INFORMATION_SCHEMA.PROCESSLIST WHERE STATE = 'debug sync point: now';
--source include/wait_condition.inc

SET GLOBAL debug = '';
SET DEBUG_SYNC= 'now SIGNAL signal.alter_locked_tables_inplace';
--let $wait_condition = SELECT COUNT(*) < 2 FROM INFORMATION_SCHEMA.PROCESSLIST WHERE STATE = 'debug sync point: now';
--source include/wait_condition.inc

SET DEBUG_SYNC= 'now SIGNAL signal.alter_locked_tables_inplace';
--let $wait_condition = SELECT COUNT(*) = 0 FROM INFORMATION_SCHEMA.PROCESSLIST WHERE INFO LIKE 'ALTER%';
--source include/wait_condition.inc

SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;

--connection node_1
--reap

SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;

SET SESSION wsrep_osu_method=TOI;

DROP TABLE t1;
DROP TABLE t2;

