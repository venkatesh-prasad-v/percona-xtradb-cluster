INSTALL PLUGIN mecab SONAME 'libpluginmecab.so';
SHOW STATUS LIKE 'mecab_charset';
Variable_name	Value
mecab_charset	utf8mb4
SET ft_query_extra_word_chars = OFF;
*** saving global system variables
SET @old_innodb_optimize_fulltext_only = @@global.innodb_optimize_fulltext_only;
SET GLOBAL innodb_optimize_fulltext_only = ON;
SET @old_innodb_ft_aux_table = @@global.innodb_ft_aux_table;

*** creating a simple table with a full text index
SET innodb_ft_enable_stopword = OFF;
CREATE TABLE t1 (c TINYTEXT, FULLTEXT KEY (c) WITH PARSER mecab) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
SET GLOBAL innodb_ft_aux_table = 'test/t1';

***************************************
*** Part I: original crash scenario ***
***************************************

*** inserting a record containing the '%' character
SET @special_string = 'vdf%vdfd%ghdi%opu';
INSERT INTO t1 VALUES (@special_string);
include/assert.inc [number of records in the index cache after inserting 'vdf%vdfd%ghdi%opu' is expected to be 4]
SELECT WORD FROM INFORMATION_SCHEMA.INNODB_FT_INDEX_CACHE ORDER BY WORD;
WORD
ghdi
opu
vdf
vdfd
include/assert.inc [number of records in the index table after inserting 'vdf%vdfd%ghdi%opu' is expected to be zero]
OPTIMIZE TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	optimize	status	OK

*** updating the table with another record also containing the '%' character
SET @special_string = 'sd%he%ff';
UPDATE t1 SET c = @special_string;
include/assert.inc [number of records in the index cache after updating to 'sd%he%ff' is expected to be 3]
SELECT WORD FROM INFORMATION_SCHEMA.INNODB_FT_INDEX_CACHE ORDER BY WORD;
WORD
ff
he
sd
include/assert.inc [number of records in the index table after updating to 'sd%he%ff' is expected to be 4]
SELECT WORD FROM INFORMATION_SCHEMA.INNODB_FT_INDEX_TABLE ORDER BY WORD;
WORD
ghdi
opu
vdf
vdfd
OPTIMIZE TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	optimize	status	OK
include/assert.inc [number of records in the index cache after updating to 'sd%he%ff' and optimizing is expected to be zero]
include/assert.inc [number of records in the index table after updating to 'sd%he%ff' and optimizing is expected to be 3]
SELECT WORD FROM INFORMATION_SCHEMA.INNODB_FT_INDEX_TABLE ORDER BY WORD;
WORD
ff
he
sd

*** deleting the record
DELETE FROM t1;
OPTIMIZE TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	optimize	status	OK

**************************************************
*** Part II: indexing other special characters ***
**************************************************

*** creating a list of all printable characters (ASCII 33..126)
*** (whitespace and control characters are excluded)
SELECT GROUP_CONCAT(CHAR(value + 33 USING utf8mb4) SEPARATOR '') INTO @special_characters FROM PERCONA_SEQUENCE_TABLE(127 - 33) AS tt;
SELECT @special_characters;
@special_characters
!"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~

*** for each character from the set we create a string containing this character
*** and perform SELECTs with various MATCH() ... AGAINST() clauses (both in
*** NATURAL LANGUAGE and BOOLEAN modes)

*** please note that it is totally OK that some of these checks do not return
*** the result we call "expected" - a number of characters have special meaning
*** (especially in BOOLEAN mode) - our goal here is to test for crashes

*** also we expect the number of mismatches to be much lower when
*** 'ft_query_extra_word_chars' is set to 'ON'

include/assert.inc [number of records for the special string containing '!' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc!def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc!", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "!def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc!def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc!def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc!", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "!def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "zabc!def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '"' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc"def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc"", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: ""def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc"def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc"def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc"", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: ""def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "zabc"def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '#' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc#def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc#", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "#def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc#def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc#def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc#", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "#def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "zabc#def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '$' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc$def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc$", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "$def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc$def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc$def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc$", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "$def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "zabc$def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '%' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc%def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc%", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "%def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc%def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc%def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc%", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "%def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "zabc%def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '&' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc&def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc&", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "&def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc&def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc&def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc&", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "&def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "zabc&def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing ''' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc'def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc'", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "'def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc'def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc'def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc'", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "'def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "zabc'def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '(' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc(def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc(", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "(def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc(def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing ')' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc)def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc)", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: ")def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc)def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '*' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc*def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc*", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "*def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc*def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc*def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc*", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "*def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "zabc*def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '+' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc+def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc+", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "+def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc+def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc+def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc+", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "+def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "zabc+def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing ',' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc,def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc,", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: ",def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc,def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc,def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc,", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: ",def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "zabc,def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '-' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc-def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc-", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "-def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc-def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc-def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc-", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "zabc-def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '.' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc.def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc.", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: ".def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc.def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc.def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc.", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: ".def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "zabc.def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '/' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc/def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc/", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "/def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc/def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc/def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc/", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "/def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "zabc/def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '0' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc0def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc0", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "0def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc0def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc0def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc0", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "0def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '1' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc1def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc1", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "1def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc1def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc1def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc1", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "1def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '2' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc2def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc2", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "2def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc2def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc2def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc2", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "2def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '3' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc3def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc3", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "3def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc3def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc3def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc3", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "3def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '4' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc4def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc4", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "4def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc4def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc4def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc4", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "4def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '5' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc5def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc5", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "5def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc5def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc5def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc5", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "5def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '6' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc6def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc6", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "6def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc6def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc6def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc6", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "6def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '7' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc7def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc7", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "7def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc7def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc7def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc7", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "7def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '8' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc8def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc8", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "8def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc8def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc8def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc8", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "8def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '9' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc9def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc9", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "9def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc9def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc9def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc9", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "9def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing ':' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc:def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc:", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: ":def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc:def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc:def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc:", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: ":def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "zabc:def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing ';' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc;def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc;", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: ";def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc;def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc;def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc;", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: ";def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "zabc;def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '<' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc<def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc<", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "<def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc<def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc<def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc<", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "<def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "zabc<def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '=' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc=def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc=", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "=def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc=def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc=def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc=", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "=def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "zabc=def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '>' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc>def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc>", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: ">def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc>def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc>def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc>", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: ">def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "zabc>def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '?' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc?def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc?", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "?def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc?def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc?def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc?", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "?def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "zabc?def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '@' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc@def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc@", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "@def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc@def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc@def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc@", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "@def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "zabc@def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing 'A' is expected to be 1]
include/assert.inc [number of records for the special string containing 'B' is expected to be 1]
include/assert.inc [number of records for the special string containing 'C' is expected to be 1]
include/assert.inc [number of records for the special string containing 'D' is expected to be 1]
include/assert.inc [number of records for the special string containing 'E' is expected to be 1]
include/assert.inc [number of records for the special string containing 'F' is expected to be 1]
include/assert.inc [number of records for the special string containing 'G' is expected to be 1]
include/assert.inc [number of records for the special string containing 'H' is expected to be 1]
include/assert.inc [number of records for the special string containing 'I' is expected to be 1]
include/assert.inc [number of records for the special string containing 'J' is expected to be 1]
include/assert.inc [number of records for the special string containing 'K' is expected to be 1]
include/assert.inc [number of records for the special string containing 'L' is expected to be 1]
include/assert.inc [number of records for the special string containing 'M' is expected to be 1]
include/assert.inc [number of records for the special string containing 'N' is expected to be 1]
include/assert.inc [number of records for the special string containing 'O' is expected to be 1]
include/assert.inc [number of records for the special string containing 'P' is expected to be 1]
include/assert.inc [number of records for the special string containing 'Q' is expected to be 1]
include/assert.inc [number of records for the special string containing 'R' is expected to be 1]
include/assert.inc [number of records for the special string containing 'S' is expected to be 1]
include/assert.inc [number of records for the special string containing 'T' is expected to be 1]
include/assert.inc [number of records for the special string containing 'U' is expected to be 1]
include/assert.inc [number of records for the special string containing 'V' is expected to be 1]
include/assert.inc [number of records for the special string containing 'W' is expected to be 1]
include/assert.inc [number of records for the special string containing 'X' is expected to be 1]
include/assert.inc [number of records for the special string containing 'Y' is expected to be 1]
include/assert.inc [number of records for the special string containing 'Z' is expected to be 1]
include/assert.inc [number of records for the special string containing '[' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc[def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc[", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "[def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc[def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc[def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc[", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "[def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "zabc[def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '\' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc\def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc\", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "\def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc\def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc\def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc\", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "\def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "zabc\def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing ']' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc]def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc]", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "]def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc]def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc]def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc]", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "]def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "zabc]def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '^' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc^def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc^", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "^def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc^def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc^def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc^", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "^def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "zabc^def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '_' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc_def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc_", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "_def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc_def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc_def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc_", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "_def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '`' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc`def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc`", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "`def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc`def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc`def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc`", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "`def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "zabc`def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing 'a' is expected to be 1]
include/assert.inc [number of records for the special string containing 'b' is expected to be 1]
include/assert.inc [number of records for the special string containing 'c' is expected to be 1]
include/assert.inc [number of records for the special string containing 'd' is expected to be 1]
include/assert.inc [number of records for the special string containing 'e' is expected to be 1]
include/assert.inc [number of records for the special string containing 'f' is expected to be 1]
include/assert.inc [number of records for the special string containing 'g' is expected to be 1]
include/assert.inc [number of records for the special string containing 'h' is expected to be 1]
include/assert.inc [number of records for the special string containing 'i' is expected to be 1]
include/assert.inc [number of records for the special string containing 'j' is expected to be 1]
include/assert.inc [number of records for the special string containing 'k' is expected to be 1]
include/assert.inc [number of records for the special string containing 'l' is expected to be 1]
include/assert.inc [number of records for the special string containing 'm' is expected to be 1]
include/assert.inc [number of records for the special string containing 'n' is expected to be 1]
include/assert.inc [number of records for the special string containing 'o' is expected to be 1]
include/assert.inc [number of records for the special string containing 'p' is expected to be 1]
include/assert.inc [number of records for the special string containing 'q' is expected to be 1]
include/assert.inc [number of records for the special string containing 'r' is expected to be 1]
include/assert.inc [number of records for the special string containing 's' is expected to be 1]
include/assert.inc [number of records for the special string containing 't' is expected to be 1]
include/assert.inc [number of records for the special string containing 'u' is expected to be 1]
include/assert.inc [number of records for the special string containing 'v' is expected to be 1]
include/assert.inc [number of records for the special string containing 'w' is expected to be 1]
include/assert.inc [number of records for the special string containing 'x' is expected to be 1]
include/assert.inc [number of records for the special string containing 'y' is expected to be 1]
include/assert.inc [number of records for the special string containing 'z' is expected to be 1]
include/assert.inc [number of records for the special string containing '{' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc{def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc{", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "{def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc{def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc{def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc{", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "{def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "zabc{def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '|' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc|def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc|", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "|def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc|def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc|def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc|", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "|def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "zabc|def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '}' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc}def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc}", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "}def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc}def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc}def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc}", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "}def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "zabc}def", expected result: 0, result: 1
include/assert.inc [number of records for the special string containing '~' is expected to be 2]
*** mode: "NATURAL LANGUAGE", pattern: "abc~def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "abc~", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "~def", expected result: 0, result: 1
*** mode: "NATURAL LANGUAGE", pattern: "zabc~def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc~def", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "abc~", expected result: 0, result: 1
*** mode: "BOOLEAN", pattern: "zabc~def", expected result: 0, result: 1

*** dropping the table
DROP TABLE t1;

*** restoring global system variables
SET GLOBAL innodb_ft_aux_table = @old_innodb_ft_aux_table;
SET GLOBAL innodb_optimize_fulltext_only = @old_innodb_optimize_fulltext_only;
UNINSTALL PLUGIN mecab;
