# ==== Purpose ====
#
# This test verifies that garbd shuts down when when donor node is killed while
# SST is in progress.
#
# ==== Implementation ====
#
# 1. Create a two node cluster.
# 2. Shutdown node2 and use its ports for garbd.
# 3. Add a debug point on node1 to stop after reading xid from InnoDB.
# 4. Start garbd in background and wait till node1 reads the wsrep_xid from
#    InnoDB.
# 5. Kill node1 and wait till SST failure is handled and garbd is shutdown.
# 6. Restart node1 and node2
# 7. Verify that the reason for the shutdown is logged in the error log.
# 8. Cleanup
#
# ==== References ====
#
# PXC-3353: Modify error handling to close the communication channels and abort
#           the joiner node when donor crashes

--source include/have_debug.inc
--source include/have_debug_sync.inc

--echo #
--echo # 1. Create a two node cluster.
--source include/galera_cluster.inc

--echo #
--echo # 2. Shutdown node2 and use its ports for garbd.
--connection node_2
--source include/shutdown_mysqld.inc

# Wait for the cluster size to become 1
--connection node_1
--let $wait_condition = SELECT VARIABLE_VALUE = 1 FROM performance_schema.global_status WHERE VARIABLE_NAME = 'wsrep_cluster_size'
--source include/wait_condition.inc

SHOW STATUS LIKE 'wsrep_flow_control_interval';

--echo #
--echo # 3. Add a debug point on node1 to stop after reading xid from InnoDB.
--let $debug_point= stop_after_reading_xid
--source include/add_debug_point.inc

--echo #
--echo # 4. Start garbd in background and wait till node1 reads the
--echo #    wsrep_xid from InnoDB.
--let $PID_FILE= $MYSQLTEST_VARDIR/tmp/garbd.pid
--let $GARBD_LOG_FILE= $MYSQLTEST_VARDIR/tmp/garbd.log

# Test a single node with an arbitrator.  Startup a 2-node cluster, shut down
# node 2, and use it's ports for the garbd.
#
# Set the evs.inactive_timeout to ensure that the node will shutdown 6
# seconds after it is killed. This is set to 6 seconds because
# evs.inactive_timeout > evs.suspect_timeout (PT5S)
--let $command = "`dirname $WSREP_PROVIDER`/../bin/garbd"
--let $command_opt = --sst="xtrabackup-v2:127.0.0.1:9999/xtrabackup_sst//1" --donor node1 --address "gcomm://127.0.0.1:$NODE_GALERAPORT_1" --group my_wsrep_cluster --options 'evs.inactive_timeout=PT6S;base_port=$NODE_GALERAPORT_2' > $GARBD_LOG_FILE 2>&1
--source include/start_proc_in_background.inc

--connection node_1
--echo [connection node_1]
SET SESSION wsrep_sync_wait=0;
SET DEBUG_SYNC='now wait_for read_xid';

--echo #
--echo # 5. Kill node1 and wait till SST failure is handled and garbd is shutdown.
--source include/kill_galera.inc
--source include/wait_proc_to_finish.inc

# node1 has wsrep_cluster_address=gcomm:// in my.cnf, and since is not the last
# server to shutdown, it will have safe_to_bootstrap set to 0 in the
# grastate.dat file and makes the bootstrap to fail.
#
# Remove the grastate.dat files to restart the cluster.
--remove_file $MYSQLTEST_VARDIR/mysqld.1/data/grastate.dat
--remove_file $MYSQLTEST_VARDIR/mysqld.2/data/grastate.dat

--echo #
--echo # 6. Restart node1 and node2
--connection node_1
--echo [connection node_1]
--let $_expect_file_name= $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--source include/start_mysqld.inc
--source include/wait_until_connected_again.inc

--connection node_2
--echo [connection node_2]
--let $_expect_file_name= $MYSQLTEST_VARDIR/tmp/mysqld.2.expect
--source include/start_mysqld.inc
--source include/wait_until_connected_again.inc

# Wait for the cluster size to become 2
--connection node_1
--let $wait_condition = SELECT VARIABLE_VALUE = 2 FROM performance_schema.global_status WHERE VARIABLE_NAME = 'wsrep_cluster_size'
--source include/wait_condition.inc

--connection node_2
--let $wait_condition = SELECT VARIABLE_VALUE = 2 FROM performance_schema.global_status WHERE VARIABLE_NAME = 'wsrep_cluster_size'
--source include/wait_condition.inc

--echo #
--echo # 7. Verify that the reason for the shutdown is logged in the garbd log.
--let $assert_select= Garbd exiting with error: State transfer request failed: 113 \(No route to host\)
--let $assert_text= Appropriate message has been written to the garbd log explaining the reason for the shutdown.
--let $assert_count= 1
--let $assert_file= $GARBD_LOG_FILE
--source include/assert_grep.inc

# Add test suppressions
--connection node_1
CALL mtr.add_suppression("Member .*garb.* requested state transfer from 'node1', but it is impossible to select State Transfer donor: No route to host");

--echo #
--echo # 8. Cleanup
--remove_file $GARBD_LOG_FILE
--remove_file $PID_FILE
