#
# A simple test for PREPARE / EXECUTE -style prepared statements with Galera
#
# C-API-level prepared-statements can not be triggered from inside mysqltest, however
# can be exercised when running an MTR test suite with the --ps-protocol switch.
#

--source include/galera_cluster.inc

CREATE TABLE t1 (f1 CHAR(5)) ENGINE=InnoDB;
CREATE TABLE t2 (f1 CHAR(5)) ENGINE=InnoDB;
CREATE TABLE t3 (f1 CHAR(5)) ENGINE=InnoDB;
CREATE TABLE t4 (f1 CHAR(5)) ENGINE=InnoDB;

SET SESSION sql_mode=DEFAULT;

PREPARE st1 FROM 'INSERT INTO t1 VALUES ("abc")';
PREPARE st2 FROM 'INSERT INTO t2 VALUES ("abc")';
PREPARE st3 FROM 'INSERT INTO t3 VALUES ("abc")';
PREPARE st4 FROM 'INSERT INTO t4 VALUES ("abc")';

EXECUTE st1;
EXECUTE st2;
EXECUTE st3;
EXECUTE st4;

--connection node_2
SELECT COUNT(*) = 1 FROM t1;
SELECT COUNT(*) = 1 FROM t2;
SELECT COUNT(*) = 1 FROM t3;
SELECT COUNT(*) = 1 FROM t4;

ALTER TABLE t1 ADD COLUMN f2 INTEGER;
ALTER TABLE t1 DROP COLUMN f1;

--connection node_1
--error ER_TRUNCATED_WRONG_VALUE_FOR_FIELD
EXECUTE st1;

--connection node_1
DROP TABLE t1;
DROP TABLE t2;
DROP TABLE t3;
DROP TABLE t4;

#
# Re-executing of same prepare statement multiple times with DDL involved
# causing TOI invocation.
#
--connection node_2
call mtr.add_suppression("Replica SQL: Error 'Table 'v1' already exists' on .*");
call mtr.add_suppression("Ignoring error 'Table 'v1' already exists'");
call mtr.add_suppression("Query apply failed.*");

--connection node_1
call mtr.add_suppression("Replica SQL: Error 'Table 'v1' already exists' on .*");
call mtr.add_suppression("Ignoring error 'Table 'v1' already exists'");
#
use test;
create table t1 (i int key, j blob) engine=innodb;
prepare stmt from "create view v1 as SELECT 1 b";
execute stmt;
--error ER_TABLE_EXISTS_ERROR
execute stmt;
drop view v1;
drop table t1;

#
# Re-execution of the prepared statement with parallel DDL (PXC-4033)
#
CREATE TABLE t1 (id INT PRIMARY KEY, f1 int);
INSERT INTO t1 VALUES (0, 0);

PREPARE stmt FROM 'UPDATE t1 SET f1 = ? WHERE id = ?';

# DDL will change table's metadata, so prepared stmt executed after it will be aborted, it will be re-prepared and re-executed
CREATE INDEX idx1 ON t1 (f1);

SET @value=10;
SET @id=0;
EXECUTE stmt USING @value, @id;

--let $assert_text = Value should be updated
--let $assert_cond = [SELECT COUNT(*) FROM t1 WHERE f1=10] = 1
--source include/assert.inc

DROP TABLE t1;

#
# Similar to the above but for multi statement transaction.
# Re-execution of the prepared statement with parallel DDL (PXC-4033)
#

CREATE TABLE t1 (id INT PRIMARY KEY, f1 int);
INSERT INTO t1 VALUES (0, 0);

PREPARE stmt FROM 'UPDATE t1 SET f1 = ? WHERE id = ?';

# DDL will change table's metadata, so prepared stmt executed after it will be aborted, it will be re-prepared and re-executed
CREATE INDEX idx1 ON t1 (f1);

BEGIN;
SET @value=10;
SET @id=0;
EXECUTE stmt USING @value, @id;
COMMIT;

--let $assert_text = Value should be updated
--let $assert_cond = [SELECT COUNT(*) FROM t1 WHERE f1=10] = 1
--source include/assert.inc

# Without the fix, the value is updated on node_1, but the change is not replicated
--connection node_2
--let $assert_text = Value should be updated
--let $assert_cond = [SELECT COUNT(*) FROM t1 WHERE f1=10] = 1
--source include/assert.inc

DROP TABLE t1;
