# Thest that Galera events processing is not blocked by user threads
# that have been granted InnoDB access when innodb_thread_concurrency
# is limited

--source include/have_debug.inc
--source include/galera_cluster.inc
--source include/count_sessions.inc

--connect node_1a, 127.0.0.1, root, , test, $NODE_MYPORT_1
--connect node_1b, 127.0.0.1, root, , test, $NODE_MYPORT_1

# Stop node 2 and force SST
--connection node_2
--source include/shutdown_mysqld.inc

# Remove the grastate.dat file to force an SST
--remove_file $MYSQLTEST_VARDIR/mysqld.2/data/grastate.dat

--connection node_1
CREATE TABLE t1 (a INT PRIMARY KEY);
SET debug_sync='ib_after_row_insert SIGNAL insert1_done WAIT_FOR continue';
--send INSERT INTO t1 VALUES (0)

--connection node_1a
SET debug_sync='ib_after_row_insert SIGNAL insert2_done WAIT_FOR continue';
--send INSERT INTO t1 VALUES (1)

--connection node_1b
SET debug_sync='now WAIT_FOR insert1_done';
SET debug_sync='now WAIT_FOR insert2_done';

# Now we have 2 threads granted access to InnoDB
# No more threads allowed (innodb_thread_concurrency=2)
# But wsrep applier and SST donor thread should be the exemption

# Start node_2
--connection node_2
--source include/start_mysqld.inc

--let $wait_condition = SELECT VARIABLE_VALUE = 2 FROM performance_schema.global_status WHERE VARIABLE_NAME = 'wsrep_cluster_size';
--source include/wait_condition.inc

# Now let paused inserts to continue
--connection node_1b
SET debug_sync='now SIGNAL continue';
SET debug_sync='now SIGNAL continue';

--connection node_1
--reap
--connection node_1a
--reap

# Replication should still work
INSERT INTO t1 VALUES (2);
--connection node_2
--let $wait_condition = SELECT COUNT(*) = 3 FROM t1
--source include/wait_condition.inc

# cleanup
--connection node_1
DROP TABLE t1;

--disconnect node_1a
--disconnect node_1b
--source include/wait_until_count_sessions.inc
