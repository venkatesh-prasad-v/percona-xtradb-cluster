#
# This test verifies that PXC node operating as a replica to a MySQL source
# handles the lock conflict properly and replicated transactions are retried
# honoring the replica_transaction_retries.
#
# The galera/galera_1node_as_slave.cnf describes the setup of the nodes

# As node #1 is not a Galera node, we connect to node #2 in order to run
# include/galera_cluster.inc
--connect node_2a, 127.0.0.1, root, , test, $NODE_MYPORT_2
--source include/galera_cluster_master_slave.inc
--disconnect node_2a

--echo #
--echo # 1. Setup replication
--connection node_2
--echo # connection node_2
# Set the innnodb_lock_wait_timeout to a smaller value to make the test fast
SET @saved_replica_transaction_retries = @@GLOBAL.replica_transaction_retries;
SET @saved_innodb_lock_wait_timeout = @@GLOBAL.innodb_lock_wait_timeout;

SET GLOBAL replica_transaction_retries = 4;
SET GLOBAL innodb_lock_wait_timeout = 2;

--disable_query_log
--eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_PORT=$NODE_MYPORT_1;
--enable_query_log
START REPLICA USER='root';

--echo # connection node_1
--connection node_1
--echo #
--echo # 2. Setup testing environment.
--echo #    2.1. Create table on source and insert few rows.
--echo #    2.2. Setup necessary variables on replica server.
CREATE TABLE t1(i INT PRIMARY KEY) ENGINE = InnoDB;
INSERT INTO t1 VALUES(1),(2),(3);

--echo #
--echo # 3. Sync the PXC node
--echo # connection node_2
--connection node_2
--let $wait_condition = SELECT COUNT(*)=3 FROM t1;
--source include/wait_condition.inc

--echo #
--echo # 4. Start a local Transaction on replica to block the DELETE statement
--echo #    coming through the replication channel. This blocks the applier
--echo #    thread executing "DELETE FROM t1" from source server.

--echo # connection node_2
--connection node_2
BEGIN;
SELECT * FROM t1 FOR UPDATE;

--echo #
--echo # 5. Execute transactions on source server that would cause lock conflict
--echo #    on replica server.
--echo # connection node_1
--connection node_1
DELETE FROM t1;

# Wait till DELETE statement to start applying
--echo # connection node_2
--connection node_2
--let $wait_condition = SELECT count(*) = 1 FROM information_schema.processlist WHERE STATE = "Applying batch of row changes (delete)";
--source include/wait_condition.inc

# Wait for a little more duration than the innodb_lock_wait_timeout to ensure that
# transaction retry is performed by the applier thread
--sleep 4

# Resume the DELETE statement from source by rolling back the local transaction
ROLLBACK;

# Wait for the DELETE statement to be applied
--let $wait_condition = SELECT COUNT(*)=0 FROM t1;
--source include/wait_condition.inc

--echo #
--echo # 6. Cleanup
--echo # connection node_1
--connection node_1
DROP TABLE t1;
RESET BINARY LOGS AND GTIDS;

--echo # connection node_2
--connection node_2

# Wait for the table to be dropped.
--let $wait_condition = SELECT COUNT(*) = 0 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 't1';
--source include/wait_condition.inc

SET GLOBAL innodb_lock_wait_timeout = @saved_innodb_lock_wait_timeout;
SET GLOBAL replica_transaction_retries = @saved_replica_transaction_retries;
--source include/rpl/stop_replica.inc
RESET REPLICA ALL;

--echo # Add error supressions.
CALL mtr.add_suppression("Pending to replicate MySQL GTID event");
