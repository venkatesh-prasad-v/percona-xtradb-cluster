#
# Test that INFORMATION_SCHEMA.PROCESSLIST shows proper information about wsrep threads
#
--source include/have_debug_sync.inc
--source include/have_debug.inc
--source include/galera_cluster.inc

#
# Restart node_2 and check that all wsrep threads related command is 'Sleep'
#
--connection node_2
--source include/kill_galera.inc
--source include/wait_until_disconnected.inc
--source include/start_mysqld.inc

--let $sleep_wsrep_thd_cnt_start = `SELECT COUNT(*) FROM INFORMATION_SCHEMA.PROCESSLIST WHERE USER = 'system user' AND STATE LIKE 'wsrep%' AND COMMAND LIKE 'Sleep'`
--let $not_sleep_wsrep_thd_cnt = `SELECT COUNT(*) FROM INFORMATION_SCHEMA.PROCESSLIST WHERE USER = 'system user' AND STATE LIKE 'wsrep%' AND COMMAND NOT LIKE 'Sleep'`

--let $assert_text = All wsrep threads COMMAND should be Sleep after node startup
--let $assert_cond = [ SELECT $not_sleep_wsrep_thd_cnt = 0 ]
--source include/assert.inc
--let $assert_text = All wsrep threads COMMAND should be Sleep after node startup
--let $assert_cond = [ SELECT $sleep_wsrep_thd_cnt_start != 0 ]
--source include/assert.inc

#
# execute DDL on node_1 and check that after applying on node_2 wsrep applier goes to 'Sleep'
#
--connection node_1
CREATE TABLE t1 (a INT PRIMARY KEY);

--connection node_2
--let $wait_condition = SELECT COUNT(*) = 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'test' AND TABLE_NAME = 't1'
--source include/wait_condition.inc

--let $sleep_wsrep_thd_cnt = `SELECT COUNT(*) FROM INFORMATION_SCHEMA.PROCESSLIST WHERE USER = 'system user' AND STATE LIKE 'wsrep%' AND COMMAND LIKE 'Sleep'`
--let $not_sleep_wsrep_thd_cnt = `SELECT COUNT(*) FROM INFORMATION_SCHEMA.PROCESSLIST WHERE USER = 'system user' AND STATE LIKE 'wsrep%' AND COMMAND NOT LIKE 'Sleep'`

--let $assert_text = All wsrep threads COMMAND should be Sleep after DDL
--let $assert_cond = [ SELECT $not_sleep_wsrep_thd_cnt = 0 ]
--source include/assert.inc
--let $assert_text = All wsrep threads COMMAND should be Sleep after DDL
--let $assert_cond = [ SELECT $sleep_wsrep_thd_cnt = $sleep_wsrep_thd_cnt_start ]
--source include/assert.inc

#
# execute DML on node_1 and check that after applying on node_2 wsrep applier goes to 'Sleep'
#
--connection node_1
INSERT INTO t1 VALUES (0);

--connection node_2
--let $wait_condition = SELECT COUNT(*) = 1 FROM t1;
--source include/wait_condition.inc

--let $sleep_wsrep_thd_cnt = `SELECT COUNT(*) FROM INFORMATION_SCHEMA.PROCESSLIST WHERE USER = 'system user' AND STATE LIKE 'wsrep%' AND COMMAND LIKE 'Sleep'`
--let $not_sleep_wsrep_thd_cnt = `SELECT COUNT(*) FROM INFORMATION_SCHEMA.PROCESSLIST WHERE USER = 'system user' AND STATE LIKE 'wsrep%' AND COMMAND NOT LIKE 'Sleep'`

--let $assert_text = All wsrep threads COMMAND should be Sleep after DML
--let $assert_cond = [ SELECT $not_sleep_wsrep_thd_cnt = 0 ]
--source include/assert.inc
--let $assert_text = All wsrep threads COMMAND should be Sleep after DML
--let $assert_cond = [ SELECT $sleep_wsrep_thd_cnt = $sleep_wsrep_thd_cnt_start ]
--source include/assert.inc

#
# execute DDL once again on node_1 and check that after applying on node_2 wsrep applier goes to 'Sleep'
#
--connection node_1
DROP TABLE t1;

--connection node_2
--let $wait_condition = SELECT COUNT(*) = 0 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'test' AND TABLE_NAME = 't1'
--source include/wait_condition.inc

--let $sleep_wsrep_thd_cnt = `SELECT COUNT(*) FROM INFORMATION_SCHEMA.PROCESSLIST WHERE USER = 'system user' AND STATE LIKE 'wsrep%' AND COMMAND LIKE 'Sleep'`
--let $not_sleep_wsrep_thd_cnt = `SELECT COUNT(*) FROM INFORMATION_SCHEMA.PROCESSLIST WHERE USER = 'system user' AND STATE LIKE 'wsrep%' AND COMMAND NOT LIKE 'Sleep'`

--let $assert_text = All wsrep threads COMMAND should be Sleep after DDL
--let $assert_cond = [ SELECT $not_sleep_wsrep_thd_cnt = 0 ]
--source include/assert.inc
--let $assert_text = All wsrep threads COMMAND should be Sleep after DDL
--let $assert_cond = [ SELECT $sleep_wsrep_thd_cnt = $sleep_wsrep_thd_cnt_start ]
--source include/assert.inc


#
# Test the status reported during the NBO
#

--connection node_1
CREATE TABLE t1 (a INT PRIMARY KEY AUTO_INCREMENT, b INT);
INSERT INTO t1(b) (SELECT * FROM PERCONA_SEQUENCE_TABLE(4) AS tt);
SET SESSION wsrep_OSU_method='NBO';

--connection node_2
SET @debug_saved = @@global.debug;
SET SESSION wsrep_sync_wait = 0;

# stop wsrep applier thread after NBO applier creation
SET GLOBAL debug = "+d,wsrep_signal_applier_thread";

# stop nbo applier after entering into NBO mode
SET GLOBAL debug = "+d,wsrep_signal_nbo_applier_thread";

--connection node_1
--send CREATE INDEX b_idx ON t1 (b)

--connection node_2
SET DEBUG_SYNC="now WAIT_FOR apply_nbo_begin_entered_nbo_mode.reached";
SET DEBUG_SYNC="now WAIT_FOR nbo_applier_started";

# wsrep applier and nbo thread both should report their states as 'Query'
--let $nbo_thds = `SELECT COUNT(*) FROM INFORMATION_SCHEMA.PROCESSLIST WHERE USER = 'system user' AND COMMAND LIKE 'Query'`
--let $assert_text = Wsrep applier and nbo applier should be in Query state
--let $assert_cond = [ SELECT $nbo_thds = 2 ]
--source include/assert.inc

# unblock wsrep applier thread and wait until it is done with creation of NBO applier
SET DEBUG_SYNC="now SIGNAL apply_nbo_begin_entered_nbo_mode.continue";
SET DEBUG_SYNC="now WAIT_FOR apply_nbo_begin_nbo_applier_created.reached";
--let $nbo_thds = `SELECT COUNT(*) FROM INFORMATION_SCHEMA.PROCESSLIST WHERE USER = 'system user' AND COMMAND LIKE 'Query'`
--let $assert_text = Only nbo applier should be in Query state
--let $assert_cond = [ SELECT $nbo_thds = 1 ]
--source include/assert.inc

# unblock NBO applier thread and wait until it is done
SET DEBUG_SYNC="now SIGNAL nbo_applier_continue";
SET DEBUG_SYNC="now WAIT_FOR nbo_applier_finished";

--let $nbo_thds = `SELECT COUNT(*) FROM INFORMATION_SCHEMA.PROCESSLIST WHERE USER = 'system user' AND COMMAND LIKE 'Query'`
--let $assert_text = There should be no thread in Query state after NBO execution
--let $assert_cond = [ SELECT $nbo_thds = 0 ]
--source include/assert.inc

SET @@global.debug = @debug_saved;

--connection node_1
--reap
SET SESSION wsrep_OSU_method='TOI';
DROP TABLE t1;
