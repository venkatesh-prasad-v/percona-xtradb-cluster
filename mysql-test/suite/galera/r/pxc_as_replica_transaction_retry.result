#
# 1. Setup replication
# connection node_2
SET @saved_replica_transaction_retries = @@GLOBAL.replica_transaction_retries;
SET @saved_innodb_lock_wait_timeout = @@GLOBAL.innodb_lock_wait_timeout;
SET GLOBAL replica_transaction_retries = 4;
SET GLOBAL innodb_lock_wait_timeout = 2;
START REPLICA USER='root';
Warnings:
Note	1759	Sending passwords in plain text without SSL/TLS is extremely insecure.
# connection node_1
#
# 2. Setup testing environment.
#    2.1. Create table on source and insert few rows.
#    2.2. Setup necessary variables on replica server.
CREATE TABLE t1(i INT PRIMARY KEY) ENGINE = InnoDB;
INSERT INTO t1 VALUES(1),(2),(3);
#
# 3. Sync the PXC node
# connection node_2
#
# 4. Start a local Transaction on replica to block the DELETE statement
#    coming through the replication channel. This blocks the applier
#    thread executing "DELETE FROM t1" from source server.
# connection node_2
BEGIN;
SELECT * FROM t1 FOR UPDATE;
i
1
2
3
#
# 5. Execute transactions on source server that would cause lock conflict
#    on replica server.
# connection node_1
DELETE FROM t1;
# connection node_2
ROLLBACK;
#
# 6. Cleanup
# connection node_1
DROP TABLE t1;
RESET BINARY LOGS AND GTIDS;
# connection node_2
SET GLOBAL innodb_lock_wait_timeout = @saved_innodb_lock_wait_timeout;
SET GLOBAL replica_transaction_retries = @saved_replica_transaction_retries;
include/rpl/stop_replica.inc
RESET REPLICA ALL;
# Add error supressions.
CALL mtr.add_suppression("Pending to replicate MySQL GTID event");
